{"ast":null,"code":"var _jsxFileName = \"C:\\\\Src\\\\social-media-react-app\\\\social-media-react-app\\\\src\\\\components\\\\Profile\\\\Profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom';\nimport { ProfileWrapper, PostDummy, InfoCol, Bio, BioML, GridWrapper, FlexEven } from './Profile.styles';\nimport Grid from '@material-ui/core/Grid';\nimport UserInfo from '../SideNav/SideNavProfile/SideNavProfileComponents/UserInfo'; //import {useQuery} from 'react-query';\n\nimport ProfileGridItem from './ProfileGridItem';\nimport { dummyData, dummyImg } from '../temp/dummyData';\nimport SearchBar from '../TopNav/TopNavComponents/SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = props => {\n  _s();\n\n  if ('userId' in props) {\n    console.log(true);\n  } else {\n    console.log(false);\n  } //const getUser = async() => await((await fetch('https://localhost')).json());\n  // const {data, isLoading, error} = useQuery(\n  //     'userdata',\n  //     getUser\n  // );\n  //if(Authenticated userId != props.location.state.userId)\n  //return version with no edit bio and <p> for bio\n\n\n  const {\n    userName\n  } = props.location.state;\n  const [bio, setBio] = useState(dummyData.bio);\n  const [bioReadOnly, setReadOnly] = useState(true);\n  const [saveBtn, showSaveBtn] = useState(false);\n  const [isSelf, setIsSelf] = useState(false); //usually false\n\n  const handleBioChange = event => {\n    setBio(event.target.value);\n  };\n\n  const handleBioEdit = () => {\n    setReadOnly(false);\n    showSaveBtn(true);\n  };\n\n  const handleBioSave = () => {\n    //Api call to put/patch new bio\n    showSaveBtn(false);\n    setReadOnly(true);\n  };\n\n  const testSelfBtn = () => {\n    setIsSelf(v => !v);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProfileWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(InfoCol, {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: dummyData.userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(UserInfo, {\n            name: \"Posts\",\n            number: dummyData.posts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"follow\",\n              state: {\n                followIndex: 0,\n                userName: userName\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(UserInfo, {\n              name: \"Followers\",\n              number: dummyData.followers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"follow\",\n              state: {\n                followIndex: 1,\n                userName: userName\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(UserInfo, {\n              name: \"Following\",\n              number: dummyData.following\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bio, {\n        children: /*#__PURE__*/_jsxDEV(BioML, {\n          multiline: true,\n          value: bio,\n          InputProps: {\n            readOnly: bioReadOnly,\n            className: \"bio-text\"\n          },\n          onChange: handleBioChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), bioReadOnly && isSelf ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"edit\",\n        variant: \"contained\",\n        onClick: () => handleBioEdit(),\n        children: \"Edit Bio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 42\n      }, this) : null, saveBtn ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"edit\",\n        variant: \"contained\",\n        onClick: () => handleBioSave(),\n        children: \"SAVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 28\n      }, this) : null, !isSelf ? /*#__PURE__*/_jsxDEV(FlexEven, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Follow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 28\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => testSelfBtn(),\n        children: \"TEST BUTTON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PostDummy, {\n      children: /*#__PURE__*/_jsxDEV(GridWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          justify: \"flex-start\",\n          alignItems: \"center\",\n          children: dummyImg === null || dummyImg === void 0 ? void 0 : dummyImg.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(ProfileGridItem, {\n              link: item.id,\n              src: item.photo,\n              alt: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Profile, \"qND8PLDsfXy4bYdSJjfFTvKvE1Q=\");\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Src/social-media-react-app/social-media-react-app/src/components/Profile/Profile.js"],"names":["React","useState","Button","Link","ProfileWrapper","PostDummy","InfoCol","Bio","BioML","GridWrapper","FlexEven","Grid","UserInfo","ProfileGridItem","dummyData","dummyImg","SearchBar","Profile","props","console","log","userName","location","state","bio","setBio","bioReadOnly","setReadOnly","saveBtn","showSaveBtn","isSelf","setIsSelf","handleBioChange","event","target","value","handleBioEdit","handleBioSave","testSelfBtn","v","userId","posts","pathname","followIndex","followers","following","readOnly","className","map","item","id","photo"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport { ProfileWrapper, PostDummy, InfoCol, Bio, BioML, GridWrapper, FlexEven } from './Profile.styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport UserInfo from '../SideNav/SideNavProfile/SideNavProfileComponents/UserInfo';\r\n//import {useQuery} from 'react-query';\r\nimport ProfileGridItem from './ProfileGridItem';\r\nimport { dummyData, dummyImg } from '../temp/dummyData';\r\nimport SearchBar from '../TopNav/TopNavComponents/SearchBar';\r\nconst Profile = (props) => {\r\n\r\n    if ('userId' in props) {\r\n        console.log(true);\r\n    }\r\n    else {\r\n        console.log(false);\r\n    }\r\n\r\n    //const getUser = async() => await((await fetch('https://localhost')).json());\r\n    // const {data, isLoading, error} = useQuery(\r\n    //     'userdata',\r\n    //     getUser\r\n    // );\r\n    //if(Authenticated userId != props.location.state.userId)\r\n    //return version with no edit bio and <p> for bio\r\n    const {userName} = props.location.state;\r\n    const [bio, setBio] = useState(dummyData.bio)\r\n    const [bioReadOnly, setReadOnly] = useState(true);\r\n    const [saveBtn, showSaveBtn] = useState(false);\r\n    const [isSelf, setIsSelf] = useState(false); //usually false\r\n\r\n    const handleBioChange = event => {\r\n        setBio(event.target.value);\r\n    }\r\n    const handleBioEdit = () => {\r\n        setReadOnly(false);\r\n        showSaveBtn(true);\r\n    }\r\n    const handleBioSave = () => {\r\n        //Api call to put/patch new bio\r\n        showSaveBtn(false);\r\n        setReadOnly(true);\r\n    }\r\n    const testSelfBtn = () => {\r\n        setIsSelf(v => !v);\r\n    }\r\n\r\n\r\n    return (\r\n        <ProfileWrapper>\r\n            <InfoCol>\r\n                <SearchBar/>\r\n                <h1>{dummyData.userId}</h1>\r\n                <Grid container justify=\"center\" spacing={1}>\r\n                    <Grid item xs={4}>\r\n                        <UserInfo\r\n                            name=\"Posts\"\r\n                            number={dummyData.posts}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Link to={{\r\n                            pathname:\"follow\",\r\n                            state:{\r\n                                followIndex:0,\r\n                                userName:userName\r\n                            }\r\n                            }}>\r\n                            <UserInfo\r\n                                name=\"Followers\"\r\n                                number={dummyData.followers}\r\n                            />\r\n                        </Link>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                    <Link to={{\r\n                            pathname:\"follow\",\r\n                            state:{\r\n                                followIndex:1,\r\n                                userName:userName\r\n                            }\r\n                            }}>\r\n                            <UserInfo\r\n                                name=\"Following\"\r\n                                number={dummyData.following}\r\n                            />\r\n                        </Link>\r\n                    </Grid>\r\n                </Grid>\r\n                <Bio>\r\n                    <BioML\r\n                        multiline\r\n                        value={bio}\r\n                        InputProps={{\r\n                            readOnly: bioReadOnly,\r\n                            className: \"bio-text\"\r\n                        }}\r\n                        onChange={handleBioChange}\r\n                    />\r\n                </Bio>\r\n                {bioReadOnly && isSelf ? <Button className=\"edit\" variant=\"contained\" onClick={() => handleBioEdit()}>Edit Bio</Button> : null}\r\n                {saveBtn ? <Button className=\"edit\" variant=\"contained\" onClick={() => handleBioSave()}>SAVE</Button> : null}\r\n                {!isSelf ? <FlexEven>\r\n                    <Button variant=\"contained\">Follow</Button>\r\n                    <Button variant=\"contained\">Message</Button>\r\n                    <Button variant=\"contained\">Email</Button>\r\n                </FlexEven> : null}\r\n                <Button onClick={() => testSelfBtn()}>TEST BUTTON</Button>\r\n            </InfoCol>\r\n            <PostDummy>\r\n                <GridWrapper>\r\n                    <Grid\r\n                        container\r\n                        spacing={1}\r\n                        justify=\"flex-start\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        {dummyImg?.map(item => (\r\n                            <Grid item key={item.id} xs={12} md={4} lg={3} >\r\n                                <ProfileGridItem link={item.id} src={item.photo} alt={item.id} />\r\n                            </Grid>\r\n                        ))}\r\n                    </Grid>\r\n                </GridWrapper>\r\n            </PostDummy>\r\n        </ProfileWrapper>\r\n    );\r\n}\r\nexport default Profile"]},"metadata":{},"sourceType":"module"}