{"ast":null,"code":"var _jsxFileName = \"C:\\\\Src\\\\social-media-react-app\\\\social-media-react-app\\\\src\\\\components\\\\Profile\\\\Profile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\nimport { ProfileWrapper, PostDummy, InfoCol, Bio, BioML, GridWrapper, FlexEven } from \"./Profile.styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport UserInfo from \"../SideNav/SideNavProfile/SideNavProfileComponents/UserInfo\"; //import {useQuery} from 'react-query';\n\nimport ProfileGridItem from \"./ProfileGridItem\";\nimport { dummyData, dummyImg } from \"../temp/dummyData\";\nimport SearchBar from \"../TopNav/TopNavComponents/SearchBar\"; // Next line is for JWT validation\n\nimport AuthService from \"../services/auth.service\";\n/**\r\n * This page gets current User from Local Storage by calling AuthService.getCurrentUser() method\r\n * and show user information (with token).\r\n */\n\n/**\r\n// Begin validation code \r\nexport default class Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentUser()\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { currentUser } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>\r\n            <strong>{currentUser.username}</strong> Profile\r\n          </h3>\r\n        </header>\r\n        <p>\r\n          <strong>Token:</strong>{\" \"}\r\n          {currentUser.accessToken.substring(0, 20)} ...{\" \"}\r\n          {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\r\n        </p>\r\n        <p>\r\n          <strong>Id:</strong>{\" \"}\r\n          {currentUser.id}\r\n        </p>\r\n        <p>\r\n          <strong>Email:</strong>{\" \"}\r\n          {currentUser.email}\r\n        </p>\r\n        <strong>Authorities:</strong>\r\n        <ul>\r\n          {currentUser.roles &&\r\n            currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}  \r\n// End validation code\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Profile = props => {\n  _s();\n\n  if (\"userId\" in props) {\n    console.log(true);\n  } else {\n    console.log(false);\n  } //const getUser = async() => await((await fetch('https://localhost')).json());\n  // const {data, isLoading, error} = useQuery(\n  //     'userdata',\n  //     getUser\n  // );\n  //if(Authenticated userId != props.location.state.userId)\n  //return version with no edit bio and <p> for bio\n\n\n  const {\n    userName\n  } = props.location.state;\n  const [bio, setBio] = useState(dummyData.bio);\n  const [bioReadOnly, setReadOnly] = useState(true);\n  const [saveBtn, showSaveBtn] = useState(false);\n  const [isSelf, setIsSelf] = useState(false); //usually false\n\n  const handleBioChange = event => {\n    setBio(event.target.value);\n  };\n\n  const handleBioEdit = () => {\n    setReadOnly(false);\n    showSaveBtn(true);\n  };\n\n  const handleBioSave = () => {\n    //Api call to put/patch new bio\n    showSaveBtn(false);\n    setReadOnly(true);\n  };\n\n  const testSelfBtn = () => {\n    setIsSelf(v => !v);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProfileWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(InfoCol, {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: dummyData.userId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justify: \"center\",\n        spacing: 1,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(UserInfo, {\n            name: \"Posts\",\n            number: dummyData.posts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"follow\",\n              state: {\n                followIndex: 0,\n                userName: userName\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(UserInfo, {\n              name: \"Followers\",\n              number: dummyData.followers\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: \"follow\",\n              state: {\n                followIndex: 1,\n                userName: userName\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(UserInfo, {\n              name: \"Following\",\n              number: dummyData.following\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bio, {\n        children: /*#__PURE__*/_jsxDEV(BioML, {\n          multiline: true,\n          value: bio,\n          InputProps: {\n            readOnly: bioReadOnly,\n            className: \"bio-text\"\n          },\n          onChange: handleBioChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), bioReadOnly && isSelf ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"edit\",\n        variant: \"contained\",\n        onClick: () => handleBioEdit(),\n        children: \"Edit Bio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this) : null, saveBtn ? /*#__PURE__*/_jsxDEV(Button, {\n        className: \"edit\",\n        variant: \"contained\",\n        onClick: () => handleBioSave(),\n        children: \"SAVE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this) : null, !isSelf ? /*#__PURE__*/_jsxDEV(FlexEven, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Follow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => testSelfBtn(),\n        children: \"TEST BUTTON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostDummy, {\n      children: /*#__PURE__*/_jsxDEV(GridWrapper, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          justify: \"flex-start\",\n          alignItems: \"center\",\n          children: dummyImg === null || dummyImg === void 0 ? void 0 : dummyImg.map(item => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            md: 4,\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(ProfileGridItem, {\n              link: item.id,\n              src: item.photo,\n              alt: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Profile, \"qND8PLDsfXy4bYdSJjfFTvKvE1Q=\");\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["C:/Src/social-media-react-app/social-media-react-app/src/components/Profile/Profile.js"],"names":["React","useState","Component","Button","Link","ProfileWrapper","PostDummy","InfoCol","Bio","BioML","GridWrapper","FlexEven","Grid","UserInfo","ProfileGridItem","dummyData","dummyImg","SearchBar","AuthService","Profile","props","console","log","userName","location","state","bio","setBio","bioReadOnly","setReadOnly","saveBtn","showSaveBtn","isSelf","setIsSelf","handleBioChange","event","target","value","handleBioEdit","handleBioSave","testSelfBtn","v","userId","posts","pathname","followIndex","followers","following","readOnly","className","map","item","id","photo"],"mappings":"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","sourcesContent":["import React, { useState, Component } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  ProfileWrapper,\r\n  PostDummy,\r\n  InfoCol,\r\n  Bio,\r\n  BioML,\r\n  GridWrapper,\r\n  FlexEven,\r\n} from \"./Profile.styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport UserInfo from \"../SideNav/SideNavProfile/SideNavProfileComponents/UserInfo\";\r\n//import {useQuery} from 'react-query';\r\nimport ProfileGridItem from \"./ProfileGridItem\";\r\nimport { dummyData, dummyImg } from \"../temp/dummyData\";\r\nimport SearchBar from \"../TopNav/TopNavComponents/SearchBar\";\r\n\r\n// Next line is for JWT validation\r\nimport AuthService from \"../services/auth.service\";\r\n\r\n/**\r\n * This page gets current User from Local Storage by calling AuthService.getCurrentUser() method\r\n * and show user information (with token).\r\n */\r\n\r\n/**\r\n// Begin validation code \r\nexport default class Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentUser: AuthService.getCurrentUser()\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { currentUser } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"jumbotron\">\r\n          <h3>\r\n            <strong>{currentUser.username}</strong> Profile\r\n          </h3>\r\n        </header>\r\n        <p>\r\n          <strong>Token:</strong>{\" \"}\r\n          {currentUser.accessToken.substring(0, 20)} ...{\" \"}\r\n          {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\r\n        </p>\r\n        <p>\r\n          <strong>Id:</strong>{\" \"}\r\n          {currentUser.id}\r\n        </p>\r\n        <p>\r\n          <strong>Email:</strong>{\" \"}\r\n          {currentUser.email}\r\n        </p>\r\n        <strong>Authorities:</strong>\r\n        <ul>\r\n          {currentUser.roles &&\r\n            currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}  \r\n// End validation code\r\n */\r\n\r\nconst Profile = (props) => {\r\n  if (\"userId\" in props) {\r\n    console.log(true);\r\n  } else {\r\n    console.log(false);\r\n  }\r\n\r\n  //const getUser = async() => await((await fetch('https://localhost')).json());\r\n  // const {data, isLoading, error} = useQuery(\r\n  //     'userdata',\r\n  //     getUser\r\n  // );\r\n  //if(Authenticated userId != props.location.state.userId)\r\n  //return version with no edit bio and <p> for bio\r\n  const { userName } = props.location.state;\r\n  const [bio, setBio] = useState(dummyData.bio);\r\n  const [bioReadOnly, setReadOnly] = useState(true);\r\n  const [saveBtn, showSaveBtn] = useState(false);\r\n  const [isSelf, setIsSelf] = useState(false); //usually false\r\n\r\n  const handleBioChange = (event) => {\r\n    setBio(event.target.value);\r\n  };\r\n  const handleBioEdit = () => {\r\n    setReadOnly(false);\r\n    showSaveBtn(true);\r\n  };\r\n  const handleBioSave = () => {\r\n    //Api call to put/patch new bio\r\n    showSaveBtn(false);\r\n    setReadOnly(true);\r\n  };\r\n  const testSelfBtn = () => {\r\n    setIsSelf((v) => !v);\r\n  };\r\n\r\n  return (\r\n    <ProfileWrapper>\r\n      <InfoCol>\r\n        <SearchBar />\r\n        <h1>{dummyData.userId}</h1>\r\n        <Grid container justify=\"center\" spacing={1}>\r\n          <Grid item xs={4}>\r\n            <UserInfo name=\"Posts\" number={dummyData.posts} />\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <Link\r\n              to={{\r\n                pathname: \"follow\",\r\n                state: {\r\n                  followIndex: 0,\r\n                  userName: userName,\r\n                },\r\n              }}\r\n            >\r\n              <UserInfo name=\"Followers\" number={dummyData.followers} />\r\n            </Link>\r\n          </Grid>\r\n\r\n          <Grid item xs={4}>\r\n            <Link\r\n              to={{\r\n                pathname: \"follow\",\r\n                state: {\r\n                  followIndex: 1,\r\n                  userName: userName,\r\n                },\r\n              }}\r\n            >\r\n              <UserInfo name=\"Following\" number={dummyData.following} />\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <Bio>\r\n          <BioML\r\n            multiline\r\n            value={bio}\r\n            InputProps={{\r\n              readOnly: bioReadOnly,\r\n              className: \"bio-text\",\r\n            }}\r\n            onChange={handleBioChange}\r\n          />\r\n        </Bio>\r\n        {bioReadOnly && isSelf ? (\r\n          <Button\r\n            className=\"edit\"\r\n            variant=\"contained\"\r\n            onClick={() => handleBioEdit()}\r\n          >\r\n            Edit Bio\r\n          </Button>\r\n        ) : null}\r\n        {saveBtn ? (\r\n          <Button\r\n            className=\"edit\"\r\n            variant=\"contained\"\r\n            onClick={() => handleBioSave()}\r\n          >\r\n            SAVE\r\n          </Button>\r\n        ) : null}\r\n        {!isSelf ? (\r\n          <FlexEven>\r\n            <Button variant=\"contained\">Follow</Button>\r\n            <Button variant=\"contained\">Message</Button>\r\n            <Button variant=\"contained\">Email</Button>\r\n          </FlexEven>\r\n        ) : null}\r\n        <Button onClick={() => testSelfBtn()}>TEST BUTTON</Button>\r\n      </InfoCol>\r\n      <PostDummy>\r\n        <GridWrapper>\r\n          <Grid container spacing={1} justify=\"flex-start\" alignItems=\"center\">\r\n            {dummyImg?.map((item) => (\r\n              <Grid item key={item.id} xs={12} md={4} lg={3}>\r\n                <ProfileGridItem\r\n                  link={item.id}\r\n                  src={item.photo}\r\n                  alt={item.id}\r\n                />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </GridWrapper>\r\n      </PostDummy>\r\n    </ProfileWrapper>\r\n  );\r\n};\r\nexport default Profile;\r\n"]},"metadata":{},"sourceType":"module"}